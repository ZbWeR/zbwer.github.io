<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/project/2022/03/05/ok/"/>
      <url>/project/2022/03/05/ok/</url>
      
        <content type="html"><![CDATA[<p>ok</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++从零入门</title>
      <link href="/project/2021/11/19/0.%E5%A4%A7%E4%BD%93%E4%BB%8B%E7%BB%8D/"/>
      <url>/project/2021/11/19/0.%E5%A4%A7%E4%BD%93%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="0-大体介绍"><a href="#0-大体介绍" class="headerlink" title="0.大体介绍"></a>0.大体介绍</h2><ul><li>为什么要写程序：</li></ul><p>​    通过程序可以指挥电脑帮助人们解决计算量比较庞大并且具有普适性的问题，比方说从数以万计的路线中分析出最短路线，比方说进行成百上千次的加减乘除。又比方说下面这个题目：</p><p>![capture_20211117174125774](D:\Huawei Share\Screenshot\capture_20211117174125774.bmp)</p><ul><li>程序由什么组成：</li></ul><p>​    程序用于解决计算问题，所以程序的组成其实取决于问题的组成。我们先看上面这个问题由什么构成，上题题面中给出了$D1,C,D2$等数据，让我们计算费用，而费用的公式我们是知道的（怎么算油钱就不赘述了）。所以一个问题是由已知数据，计算目标，计算公式组成的。那么对于一个程序，首先要能把这些已知的数据输入到电脑中，再经过一系列的计算，最后把我们想要的答案输出来。</p><p>​    总而言之，&#x3D;&#x3D;一个基本的程序包括：<strong>输入数据</strong>，<strong>进行运算</strong>，<strong>输出答案</strong>。&#x3D;&#x3D;</p><p>在介绍这三个东西之前，还有一点前置知识需要了解，我们看到一个简单的程序。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>cnt<span class="token punctuation">,</span>now<span class="token punctuation">,</span>ans<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>cnt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>now<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>            cnt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        now<span class="token operator">=</span>a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（$PS:$观察上面程序可以发现基本上每一行结束都由一个”;”分号，分号在程序中的作用相当于语文中的句号）</p><p>我们来分块解读一下整个程序，对于前两行代码</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这是一个程序的必不可少并且千篇一律的部分，<strong>基本上</strong>每个程序都要打这两行代码。</p><p>形象地解释就是，通过这两行代码告诉计算机，我要开始编程序了，你注意一下！</p><p>比较专业的解释呢，就是&lt;bits&#x2F;stdc++.h&gt;表示的是头文件(其中&lt;&gt;中的内容指的是头文件的名字)，可以理解为一本字典，对于其他英文可以直接用中文的翻译来理解，专业的解释就是：提起声明本程序要使用<balabala>这个头文件，并且使用命名空间。翻译成人话就是：（对电脑说）我接下来要开始使用<balabala>这本字典里的专业词汇了，待会儿别和我说听不懂。</p><p>&#x3D;&#x3D;注意：&lt;bits&#x2F;stdc++.h&gt;是$c++$的库文件，请勿在$C$语言中使用&#x3D;&#x3D;</p><p>先跳过一行，直接来看下面这个框架</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       retuern <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个框架叫做“主函数”，是一个程序的主体部分，我们进行输入数据，运算以及输出都是在这个函数中进行。至于$int$,$return 0$这些是什么意思，在稍后会向大家解释。</p><p>总结一下，下面给出的这几行代码，是需要<strong>背下来</strong>的，初学的时候，你可以不用知道它们具体代表什么，但你一定要会打出来。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>课后作业：自己打这几行代码十遍，做到能默写的程度。</p><hr><h2 id="输入输出数据"><a href="#输入输出数据" class="headerlink" title="输入输出数据"></a>输入输出数据</h2><ul><li>什么是数据？或者说数据有哪些类型？</li></ul><p>​    显然数字就是一种数据，再细分一些，数字包括整数，小数等等。其次字符也是一种数据，包括我们熟悉的”abc”这些英文字母，也包括感叹号问号这些特殊字符。</p><ul><li>数据输入到哪儿？输入给谁？</li></ul><p>​    首先，我们要有不同的容器来存放这些数据，就好比现在你知道2件衣服108元，你输入了2 和 108，计算机怎么知道2代表什么意思，108代表什么意思。就像应用题解方程一样，我们在开头总要说清楚，比如设花费的油钱为$x$元，那么此时$x$就相当于一个容器。所以在输入数据之前，我们首先要声明一些变量。比如说我们声明两个变量，一个叫做$money$，用来储存衣服的价格，一个叫做$cloth$用来储存衣服的件数。</p><ul><li>那么如何声明变量呢？</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">基础的格式是：<span class="token punctuation">[</span>变量的数据类型<span class="token punctuation">]</span> <span class="token punctuation">[</span>变量的名称<span class="token punctuation">]</span>例如：    <span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token comment">//作用是声明一个叫做a的变量</span><span class="token comment">//两个斜杠表示注释，就是做笔记的意思，在程序中不会运行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>数据类型是什么呢？</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">上文提到数据有很多类型，为了某种原因，我们需要对变量的类型做一个具体划分常见的数据类型有<span class="token operator">:</span>整型（整数的意思） <span class="token keyword">int</span>长整型<span class="token punctuation">(</span>比较大的整数<span class="token punctuation">)</span> <span class="token keyword">long</span> <span class="token keyword">long</span> 浮点型（小数的意思） <span class="token keyword">double</span>字符型 <span class="token keyword">char</span>请牢记这个方块里的内容！！！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>变量的命名规则</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">变量的名字只能由下划线，数字和字母<span class="token punctuation">(</span>区分大小写<span class="token punctuation">)</span>组成，且数字不能放在首位。来看几个例子   <span class="token keyword">int</span> num_1<span class="token punctuation">;</span><span class="token comment">//声明一个叫做num_1的整数</span><span class="token keyword">double</span> Abc<span class="token punctuation">;</span><span class="token comment">//声明一个叫做Abc的小数</span><span class="token keyword">char</span> tmp1<span class="token punctuation">;</span><span class="token comment">//声明一个叫做tmp1的字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如何输入数据(顺便把输出数据讲了)</li></ul><p>提前声明：对于下文提到的所有程序，都建议自己打一遍。</p><p>这里给出两种方法，各有优劣。例如：</p><p>&#x3D;&#x3D;注意：此方法仅适用于$C++$，请勿在$C$语言中使用&#x3D;&#x3D;</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//1.</span><span class="token comment">//优点是对于各种数据类型都适用，不用变化</span><span class="token comment">//缺点是运行速度比较慢(不懂没关系)</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token comment">//定义变量a</span>    <span class="token keyword">double</span> b<span class="token punctuation">,</span>c<span class="token punctuation">;</span><span class="token comment">//连续定义多个变量b,c的方法</span>    cin<span class="token operator">>></span>a<span class="token punctuation">;</span><span class="token comment">//输入变量</span>    cin<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span><span class="token comment">//连续输入多个变量的方法</span>    cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//输出变量a的值并换行,endl代表换行</span>    cout<span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span>c<span class="token operator">&lt;&lt;</span><span class="token string">"********"</span><span class="token punctuation">;</span><span class="token comment">//连续输出多个变量以及"**********";</span>        <span class="token comment">//牢记格式：</span>    <span class="token comment">//cin>>数据的名字>>数据的名字;</span>    <span class="token comment">//cout&lt;&lt;数据名字</span>        <span class="token comment">//分号别漏！！！！</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下一种方法可能有点复杂，不理解以后再学也没关系</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//2.</span><span class="token comment">//优点是运行速度快并且比较美观</span><span class="token comment">//缺点是针对不同数据类型要微调代码</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">double</span> y<span class="token punctuation">,</span>z<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输入单个整型变量x,</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf %lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输入两个浮点型变量y,z</span>        <span class="token comment">//其中%d指的是x的数据类型为int</span>    <span class="token comment">//%lf值的是y的数据类型为double</span>    <span class="token comment">//%c指的是数据类型为char</span>    <span class="token comment">//%lld指的是数据类型为long long</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出浮点型变量y</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %lf"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出整型变量x,浮点型变量z，且中间用空格隔开</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d,%lf\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token comment">//输出x,z,且中间用逗号隔开并换行,\n表示换行</span>       <span class="token comment">//牢记格式：scanf("%变量类型对应的字符",&amp;变量名字);</span>    <span class="token comment">//记得不要漏了 &amp; (shift+7)  !!!!!</span>    <span class="token comment">//printf("%变量类型对应字符",变量名称);</span>            <span class="token comment">//一些printf的其他用法</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"******************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//不输出变量，只输出你想输出的东西</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文中提到的$scanf$和$printf$叫做格式化输入输出，下面是对于<strong>格式化</strong>的解释</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入a,b中间用空格间隔</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n%d"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出a换行再输出b</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d,,,,%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">,</span><span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入c,d中间用,,,,间隔</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the c is %d ,the d is %d"</span><span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//自己打打代码运行一下看看</span>    <span class="token comment">//试一下输入c和d的时候，中间用空格间隔会怎么样</span>        <span class="token comment">//scanf规定了你输入的格式</span>    <span class="token comment">//printf规定了你输出的格式</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><ul><li>怎样进行运算？</li></ul><p>对于一个式子$1+1$，我们知道它的结果为$2$,是因为我们知道$+$这个符号代表加法。同样，让计算机进行各种运算的时候，我们也需要类似于$+-*&#x2F;$这样的运算符，让它知道要进行哪种运算。</p><ul><li>有哪些运算符？</li></ul><p>运算符的分类：<strong>算术运算符、关系运算符、赋值运算符和逻辑运算符</strong>。</p><p>下面通过几个程序来详细解释这些不同的运算符。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//为书写方便，以下程序将省略一二两行，仅保留主函数部分</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/*算术运算符包括 + (加), - (减) , *(乘) , \(除) , %（取余）对于前四种运算符，此处不再赘述。这里只介绍 % 取余（也称取模）运算的特点注意：除法的使用与数学中不同，请自行探索a%b=c 其中 c 是a除以b后所得的余数例如：5%2= 1 因为 5 =2*2+1 余数为119%5= 4 因为 19=5*3+4 余数为4*/</span>   <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span>a<span class="token operator">+</span>b<span class="token punctuation">,</span>a<span class="token operator">-</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//输出a+b,a-b,a%b的值，自己试一下！</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*赋值运算符： = （即等号）对于式子 a=5; 表示的含义是，将5这个值交给a,即a这个变量中存储的数据是5对于式子 a=b; 表示的含义是，将b这个变量的值交给a.注意此操作不会改变b的值*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">=</span>b<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*关系运算符： >（大于） &lt;(小于) >=(大等于) &lt;=(小等于) ==(等于) !=(不等于)记住！等于是==,一个等号是赋值运算！对于一个式子 a>b 有两种情况，一种是真命题，一种是假命题。真命题在计算机中用1来表示，假命题在计算机中用0表示.*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token operator">></span>b<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//自己把>改成其他符号试一下</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>逻辑运算符将在下一部分讲解。</p><hr><h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><p>来看这样一个题目，</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">给定一个数n<span class="token punctuation">,</span>判断n是偶数还是奇数，偶数输出<span class="token string">"Yes"</span><span class="token punctuation">,</span>奇数输出<span class="token string">"No"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们发现，根据目前掌握的知识并不能解决。我们先用人话来描述一下解题思路，偶数的标准是能被2整除，意思就是这个数对2进行取模运算的结果是0.根据这一点，如果$n$%$2&#x3D;0$那么我们就输出Yes,反之输出”No”就行了。</p><p>问题在于，这个中文”如果“在计算机中用什么来表示？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*介绍一个条件判断的语句结构if(表达式1)&#123;表达式2;&#125;表达式3;它的作用是，如果表达式1为真命题，那么就会执行大括号里表达式2的内容，接着进行表达式3的内容如果表达式1为假命题，就会直接执行表达式3的内容*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输入n</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//如果n对2的余数为0,即n是偶数</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//我们输出"Yes";</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//下面这个if也可以不写，直接输出"No"也行</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*再介绍另一种结构，双分支结构if(表达式1)&#123;表达式2;&#125;else&#123;表达式3；&#125;它的作用是：如果表达式1为真就执行表达式2,否则的话就执行表达式3上述的程序可以改写为下面这种形式*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们再看到一个题目:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">给定一个数n<span class="token punctuation">,</span>如果n大于<span class="token number">0</span><span class="token punctuation">,</span>则输出<span class="token number">1</span><span class="token punctuation">;</span>如果n等于<span class="token number">0</span>，则输出<span class="token number">0</span><span class="token punctuation">;</span>如果n小于<span class="token number">0</span><span class="token punctuation">,</span>则输出<span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据我们上面学的知识，不难得出这样一份代码</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*如果if下的大括号内只有一个表达式,我们可以省略大括号不写如if(a>b)&#123;printf("1");&#125;可写为if(a>b) printf("1");*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>值得注意的是，我们不能写成这样</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因为$else$是和$if$配套使用的，此处的$else$表示的是：若$n$等于$0$不成立就输出$-1$.</p><p>即$else$的否定是只针对上一个$if$而言的</p><p>接下来再介绍一个新的结构</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*if(表达式1)&#123;表达式2;&#125;else if(表达式3)&#123;表达式4;&#125;else if(表达式5)&#123;表达式6;&#125;else&#123;表达式7；&#125;它的作用是：如果1成立，就执行2.如果1不成立3成立，就执行4.如果3也不成立5成立,就执行6......依此类推,我们可以写很多个else if.最后到了else 即 如果上述的表达式都不成立，就执行7;那么上述题目的代码可以改写为*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来我们通过一个例题来介绍上文提到的<strong>逻辑运算符</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">给定两个整数a<span class="token punctuation">,</span>b<span class="token punctuation">.</span>如果a能被<span class="token number">2</span>整除且a大于b<span class="token punctuation">,</span>则输出Yes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里涉及到了<strong>并且</strong>这个操作，让我们看看如何实现</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*逻辑运算符的分类：&amp;&amp; 表示并且的意思|| 表示或者的意思!  表示取反*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token operator">></span>b<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//a能被2整除即取余2的结果为0</span>    <span class="token comment">// a&amp;&amp;b只有当a,b都为真命题时才是真命题</span><span class="token comment">// a||b只要有一个为真就是真命题</span><span class="token comment">// !a 假如a为真命题，则!a 为假命题;反之a为假命题则!a为真命题</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>练手题链接：<a href="https://www.luogu.com.cn/training/101#problems">【入门2】分支结构 - 题单 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><hr><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><p>我们知道计算机程序的特点之一就是进行重复的运算，那么如何实现呢？我们先来看一个题目</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">给定一个整数n<span class="token punctuation">,</span>求<span class="token number">1</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">+</span><span class="token number">9</span><span class="token operator">+</span><span class="token number">16</span><span class="token operator">+</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">+</span>n²的值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于这种要进行多次运算的题目，我们就需要用到<strong>循环结构</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*基本结构for(初始化;条件判断;增量表达式)&#123;表达式1;&#125;但从框架来看肯定是云里雾里的，我们直接看具体的情景下如何使用*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//sum变量用于累加答案</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>sum<span class="token operator">=</span>sum<span class="token operator">+</span>i<span class="token operator">*</span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>         <span class="token comment">//for结构小括号里由两个分号分为三个部分，为便于表述记为1，2，3</span>    <span class="token comment">//第一个部分为初始化,在这个表达式中,我们定义了一个变量i,并令i的初始值为1</span>    <span class="token comment">//计算机首先执行初始化部分，然后进入到部分2(条件判断)</span>    <span class="token comment">//如果部分2的表达式为真，那么就会执行大括号里的内容，然后再执行部分3,然后再转到部分2进行判断，以此类推</span>    <span class="token comment">//如果为为假，则会跳出循环.即不再执行部分3和大括号里的内容</span>        <span class="token comment">//在下面的程序中，我们假设此时的n=5，首先初始化i=1,接下来进入部分2</span>    <span class="token comment">//我们发现2&lt;=5为真,那么我们执行大括号里的内容，sum=sum+i*i;</span>    <span class="token comment">//即sum=sum+1*1=0+1=1，然后执行部分3</span>    <span class="token comment">//部分3的意思就是i=i+1,即i=i+1,此时i=2</span>    <span class="token comment">//然后转到部分2判断,有2&lt;=5以此类推</span>    <span class="token comment">//直到i=6,此时不满足6&lt;=5，则跳出循环，转为执行输出</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>下面给出一些<span class="token keyword">for</span>循环的应用事例        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//即i=1-100中的所有奇数</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">=</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//即i=1-100中2的次幂</span><span class="token comment">//需要注意的是，在for()的小括号里定义的变量，在结束for循环后就不再生效.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此题中$sum$这个变量的作用请好好体会</p><p>下面我们再看一道题,</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">题目描述：所谓谓角谷猜想，是指对于任意一个正整数，如果是奇数，则乘<span class="token number">3</span>加<span class="token number">1</span>，如果是偶数，则除以<span class="token number">2</span>，得到的结果再按照上述规则重复处理，最终总能够得到<span class="token number">1</span>。如，假定初始整数为<span class="token number">5</span>，计算过程分别为<span class="token number">16</span>、<span class="token number">8</span>、<span class="token number">4</span>、<span class="token number">2</span>、<span class="token number">1</span>。程序要求输入一个整数，将经过处理得到<span class="token number">1</span>的过程输出来。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这道题与上一道题的不同之处就在于，上一道题我们知道要计算$n$次就能得出答案，而这一道题我们不知道要算多少次.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*引入一个新的循环结构：while(表达式1)&#123;表达式2;&#125;它的运行过程是这样的，先判断表达式1是否为真，若为真，则执行表达式2.执行完表达式2后再一次判断表达式1是否为真，若为真就执行表达式2,以此类推直到表达式1不为真，直接跳出循环.*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//依题意最终n=1,故n==1时才退出循环</span>    <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> n<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//偶数</span>        <span class="token keyword">else</span> n<span class="token operator">=</span>n<span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//奇数</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出变化过程</span>    <span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：若已知运算次数，则适合使用$for$循环，若未知运算次数，则考虑使用$while$循环,还有一种$dowhile$循环请读者自行了解.下面给出一些常见的循环用法</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//读入n次数据</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//其他指令</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token comment">//continue的作用是跳过接下来的表达式,直接进入i++环节</span>    <span class="token keyword">else</span> 表达式<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>练手题链接：<a href="https://www.luogu.com.cn/problem/P1980">NOIP2013 普及组] 计数问题 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><hr><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>注：此部分内容笔者其实掌握程度并不深，有兴趣的可以点链接学习<a href="http://c.biancheng.net/c/function/">C语言函数完全攻略 (biancheng.net)</a></p><ul><li><p>什么是函数？</p><p>函数就是具有独特功能的工具，比方说$S(r)&#x3D;\pi r^2 $这个函数，它的功能就是知道半径可以求出边长,比方说$max(a,b)$这个函数，就可以求出两个数中最大的那个数.</p></li><li><p>怎样编写函数？函数由哪些部分组成？</p><p>考察$S(r)&#x3D;\pi r^2 $，我们发现函数包括函数的名字($S$),函数包含的参数($r$),以及函数的运算过程($\pi r^2$)</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">在使用一个函数之前，我们需要定义函数，一般格式为：返回类型 函数名称<span class="token punctuation">(</span>类型参数<span class="token number">1</span>，类型参数<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>运算表达式<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>我们来观察几个具体函数，以此对上述格式进行解释</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//计算1+2+..+n的累和函数</span><span class="token keyword">int</span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        sum<span class="token operator">=</span>sum<span class="token operator">+</span>i<span class="token punctuation">;</span>   <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*这个函数的作用是计算1加到n的和，最终的答案应该是整数，即我们的返回类型应该设置为int(int n)代表的参数，该函数只有n一个参数，并且n是整数，所以写为int n中间部分为具体运算过程，return sum 表示返回最终的答案*/</span><span class="token comment">//求小数a,b中的最大值</span><span class="token keyword">double</span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span><span class="token keyword">double</span> b<span class="token punctuation">)</span><span class="token comment">//多个参数之间,用逗号连接</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">></span>b<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//最终答案是double类型的数据，所以返回类型应该设置为double</span><span class="token comment">//无返回值函数</span><span class="token keyword">void</span> <span class="token function">Pint</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//我们注意到这个程序并没有返回值，它做的事情就是输出a个*,对于这种无返回值的函数，其返回类型我们用void来表示</span><span class="token comment">//值得注意的是，若不需要参数,则小括号内为空</span>我们可以解释一下 <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>的含义的即表示主函数的返回类型为<span class="token keyword">int</span><span class="token punctuation">,</span>所以我们在<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>的最后一行才要协商 <span class="token keyword">return</span> <span class="token number">0</span> 至于为什么返回<span class="token number">0</span><span class="token punctuation">,</span>请读者自行了解<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如何使用函数?</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//在主函数之前先定义函数</span><span class="token keyword">double</span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span><span class="token keyword">double</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span>y<span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf %lf"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">Max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用Max函数,括号中放函数需要的两个参数</span>    <span class="token comment">//若没有参数 则写作 c=Max();</span>    <span class="token comment">//若没有返回值,则直接调用即可 Max(a,b);不用加"c="</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*写到这里其实已经差不多入门了，我没讲的地方还有字符串类型，数组，还有结构体其实还有挺多小细节没写出来，就这样吧编译器下载链接：https://bloodshed-dev-c.en.softonic.com/遇到问题学会自己百度完结，撒花！*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python零基础爬取静态网页数据</title>
      <link href="/project/2021/02/19/Python%E9%9B%B6%E5%9F%BA%E7%A1%80%E7%88%AC%E5%8F%96%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E6%95%B0%E6%8D%AE/"/>
      <url>/project/2021/02/19/Python%E9%9B%B6%E5%9F%BA%E7%A1%80%E7%88%AC%E5%8F%96%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="Python零基础爬取静态网页数据"><a href="#Python零基础爬取静态网页数据" class="headerlink" title="Python零基础爬取静态网页数据"></a>Python零基础爬取静态网页数据</h2><h3 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h3><p>前天群里公布大一上总成绩和排名的时候，只需要输入学号就可以查询个人的各科成绩和排名， 也就是说，要是我把年段所有人的学号输一遍去查，就能得到整个年段的所有成绩，近五百个学号，自然不能靠人工输入，自然考虑到写一个程序来帮我完成。但根据我仅有的c++知识，还无法完成这件事，一直听说Python能爬取网页数据，今天便试着学习一下。</p><h3 id="学习经过"><a href="#学习经过" class="headerlink" title="学习经过"></a>学习经过</h3><h4 id="原理探究："><a href="#原理探究：" class="headerlink" title="原理探究："></a>原理探究：</h4><p>首先是一些常识需要了解，一个网页是由源代码组成的，我们可以通过单击右键点击“查看源代码”来查看，我们可以借用python来帮我们访问一个网站，并获得该网页的源代码。源代码中包含了这个网页的各种信息，包括但不限于文字，图片的链接，数字等等。而我们需要的信息就藏在源代码中。获取源代码之后，我们先观察一下所需信息的特点，然后再在源码中筛选出我们需要的信息，最后借用python的一个与excel相关的库，来实现信息的存储。具体过程如下。</p><h4 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h4><p>首先是如何使用python访问网站获得源码？具体实现原理笔者尚不清楚，此处仅给出一个较为通用的模板，使用时只需调用该函数即可获得网页的源代码。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 得到指定一个URL的网页内容</span><span class="token keyword">def</span> <span class="token function">askURL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    head <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment"># 模拟浏览器头部信息，向豆瓣服务器发送消息</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla / 5.0(Windows NT 10.0; Win64; x64) AppleWebKit / 537.36(KHTML, like Gecko) Chrome / 80.0.3987.122  Safari / 537.36"</span>    <span class="token punctuation">&#125;</span>    <span class="token comment"># 用户代理，表示告诉服务器，我们是什么类型的机器、浏览器（本质上是告诉浏览器，我们可以接收什么水平的文件内容）</span>    request <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>head<span class="token punctuation">)</span>    html <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        html <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> urllib<span class="token punctuation">.</span>error<span class="token punctuation">.</span>URLError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>code<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token string">"reason"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>reason<span class="token punctuation">)</span>    <span class="token keyword">return</span> html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在本次爬取学生成绩的过程中，通过一定的观察可以发现，显示学生成绩排名的网站链接(url)是有一定规律的</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;jinshuju.net&#x2F;f&#x2F;SjWGP6&#x2F;s&#x2F;51yrCWq%5B0%5D%5Bfield_1%5D&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>前半部分均为上述字母，在等号后面加上学生的学号即可。那么根据这样的规律再结合我们学院学号的规律，就可以使用电脑来查询近500人的成绩。</p><p>获得源码之后，需要进一步解析才能被接下来的筛选过程所接受，也就是说接下来我们需要解析获得的源代码，借用python的一个库函数beautifulsoup,如何使用这个库，将在后文讲述</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1.获取网页源码</span>html <span class="token operator">=</span> askURL<span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token comment"># 2.逐一解析数据</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>紧接着我们需要进行所需信息的筛选，以爬取成绩排名为例，我们看到网页的一部分源码</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-12 col-sm-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gd-table gd-table-bordered word-break-table entry-result-content<span class="token punctuation">"</span></span>  <span class="token attr-name">data-use-logic-hide</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">data-field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field_1<span class="token punctuation">"</span></span> <span class="token attr-name">data-value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20*10*0*10005<span class="token punctuation">"</span></span> <span class="token attr-name">data-api-code</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field_1<span class="token punctuation">"</span></span> <span class="token attr-name">data-field-type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                            学号            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                20*10*0*10005            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">data-field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field_2<span class="token punctuation">"</span></span> <span class="token attr-name">data-value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20*1*20*10<span class="token punctuation">"</span></span> <span class="token attr-name">data-api-code</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field_2<span class="token punctuation">"</span></span> <span class="token attr-name">data-field-type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                            班级            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                20*1*20*10            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">data-field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field_3<span class="token punctuation">"</span></span> <span class="token attr-name">data-value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张*文<span class="token punctuation">"</span></span> <span class="token attr-name">data-api-code</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field_3<span class="token punctuation">"</span></span> <span class="token attr-name">data-field-type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                            姓名            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                张*文            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span># 部分*号为本人所作的保护隐私处理<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们想要的学号排名等信息是在<div class="col-md-12 col-sm-6">这个目录之下的，所以我们首先要从源码中把这个目录提取出来，才能进行进一步的筛选。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">item <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">"col-md-12 col-sm-6"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来比方说我们想要获得这个人的学号信息，那么我们继续看到源码解析后（注意不是源码）有关学号的这一段</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">data-api-code</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field_1<span class="token punctuation">"</span></span> <span class="token attr-name">data-field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field_1<span class="token punctuation">"</span></span> <span class="token attr-name">data-field-type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-field<span class="token punctuation">"</span></span> <span class="token attr-name">data-value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20*10*0*10005<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>              学号            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                20*10*0*10005            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以发现，学号这个信息中，最具有标识的是</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">data-api-code</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field_1<span class="token punctuation">"</span></span> <span class="token attr-name">data-field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field_1<span class="token punctuation">"</span></span> <span class="token attr-name">data-field-type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-field<span class="token punctuation">"</span></span> <span class="token attr-name">data-value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20*10*0*10005<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这一行，通过比较其他网页我们发现，这一行的前面部分都是固定的，只有末尾的那一串数字会改变。也就是说，我们只需要找到和前面那一串字母相同的信息，然后取末尾不同的那一串数字即可。我们可以通过下列方法来完成这个操作</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">findnumber <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r' data-field="field_1" data-field-type="text-field" data-value="(.*)"'</span><span class="token punctuation">)</span>item <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>number <span class="token operator">=</span> findnumber<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>re.compile的作用是找到与单引号中相同的地方，并获得(.*)所代表的数据</p><p>findnumber &#x3D;re.compile(x) 则是指 用findnumber这串英文字母代替x所代表的匹配规则</p><p>findnumber.findall(item)[0]则是在item中以findnumber为规则进行匹配</p><p>最重要的一步完成后就是储存数据啦，其他的相对简单，见完整代码的注释部分。</p><p>另外，以上操作涉及到了BeautifulSoup 以及 requests,xlwt的库函数，在程序开头我们需要声明库函数的引用，如果没用安装这个库函数，可以在cmd窗口中输入 pip install 库函数名字,例如：</p><pre class="line-numbers language-none"><code class="language-none">pip install xlwt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 库函数声明</span><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup  <span class="token comment"># 网页解析，获取数据的库</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">,</span> urllib<span class="token punctuation">.</span>error<span class="token keyword">from</span> bs4<span class="token punctuation">.</span>element <span class="token keyword">import</span> ResultSet  <span class="token comment"># 制定URL，获取网页数据的库</span><span class="token keyword">import</span> re  <span class="token comment"># 正则表达式，进行文字匹配的库</span><span class="token keyword">import</span> xlwt <span class="token comment"># 保存数据到excel所需的库</span><span class="token keyword">from</span> xlwt<span class="token punctuation">.</span>BIFFRecords <span class="token keyword">import</span> NumberFormatRecord  <span class="token comment"># 进行excel操作</span><span class="token comment"># 以下均为筛选信息的函数,此处为可diy部分</span>findRank <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r' data-field="field_15" data-field-type="number-field" data-value="(.*)"'</span><span class="token punctuation">)</span>findnumber <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r' data-field="field_1" data-field-type="text-field" data-value="(.*)"'</span><span class="token punctuation">)</span>findname <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'data-field="field_3" data-field-type="text-field" data-value="(.*)"'</span><span class="token punctuation">)</span>findcal <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'data-field="field_7" data-field-type="number-field" data-value="(.*)"'</span><span class="token punctuation">)</span>findline <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'data-field="field_9" data-field-type="number-field" data-value="(.*)"'</span><span class="token punctuation">)</span>findeng <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'data-field="field_11" data-field-type="number-field" data-value="(.*)"'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    baseurl <span class="token operator">=</span> <span class="token string">"（因隐私原因链接已删除）"</span>  <span class="token comment">#要爬取的网页链接，此处为可diy部分</span>        <span class="token comment"># 1.爬取网页</span>    datalist <span class="token operator">=</span> getData<span class="token punctuation">(</span>baseurl<span class="token punctuation">)</span>        savepath <span class="token operator">=</span> <span class="token string">"电子院大一上排名.xls"</span>    <span class="token comment">#当前目录新建XLS，存储进去 可diy</span>    <span class="token comment"># 2.保存数据</span>    saveData<span class="token punctuation">(</span>datalist<span class="token punctuation">,</span>savepath<span class="token punctuation">)</span>      <span class="token comment"># 爬取网页</span><span class="token keyword">def</span> <span class="token function">getData</span><span class="token punctuation">(</span>baseurl<span class="token punctuation">)</span><span class="token punctuation">:</span>    datalist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">#用来存储爬取的网页信息</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token comment"># 此处是根据学号规律推导网页url规律的操作 可 diy</span>        <span class="token keyword">if</span> k<span class="token operator">&lt;</span><span class="token number">10</span> <span class="token punctuation">:</span>            baseurl_ <span class="token operator">=</span> baseurl <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>        <span class="token keyword">else</span> <span class="token punctuation">:</span>            baseurl_ <span class="token operator">=</span> baseurl <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>              <span class="token comment"># 此处是根据学号规律推导网页url规律的操作 可 diy</span>            <span class="token keyword">if</span> i<span class="token operator">&lt;</span><span class="token number">10</span> <span class="token punctuation">:</span>                url <span class="token operator">=</span> baseurl_ <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">else</span> <span class="token punctuation">:</span>                url <span class="token operator">=</span> baseurl_ <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token comment"># 保存获取到的网页源码</span>            html <span class="token operator">=</span> askURL<span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span>              <span class="token comment"># 逐一解析数据</span>            soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span>                        <span class="token keyword">for</span> item <span class="token keyword">in</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">"col-md-12 col-sm-6"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 初步筛选数据，因为筛选后可能由多个情况，所以用for循环 需diy</span>                <span class="token comment"># 查找符合要求的字符串</span>                data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 保存一名学生的所有信息</span>                item <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>                <span class="token comment"># 以下均可 diy</span>                <span class="token comment"># 姓名</span>                name <span class="token operator">=</span> findname<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment"># 保存数据的操作</span>                <span class="token comment"># 学号</span>                number <span class="token operator">=</span> findnumber<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>number<span class="token punctuation">)</span>                <span class="token comment"># 总排名</span>                Rank <span class="token operator">=</span> findRank<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Rank<span class="token punctuation">)</span>                <span class="token comment"># 微积分</span>                cal <span class="token operator">=</span> findcal<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cal<span class="token punctuation">)</span>                <span class="token comment"># 线性代数</span>                line <span class="token operator">=</span> findline<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">)</span>                <span class="token comment"># 英语</span>                eng <span class="token operator">=</span> findeng<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>eng<span class="token punctuation">)</span>                datalist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment"># 保存数据</span>                    <span class="token keyword">return</span> datalist<span class="token comment"># 得到指定一个URL的网页内容 不可 diy</span><span class="token keyword">def</span> <span class="token function">askURL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    head <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment"># 模拟浏览器头部信息，向豆瓣服务器发送消息</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla / 5.0(Windows NT 10.0; Win64; x64) AppleWebKit / 537.36(KHTML, like Gecko) Chrome / 80.0.3987.122  Safari / 537.36"</span>    <span class="token punctuation">&#125;</span>    <span class="token comment"># 用户代理，表示告诉服务器，我们是什么类型的机器、浏览器（本质上是告诉浏览器，我们可以接收什么水平的文件内容）</span>    request <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>head<span class="token punctuation">)</span>    html <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        html <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> urllib<span class="token punctuation">.</span>error<span class="token punctuation">.</span>URLError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>code<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token string">"reason"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>reason<span class="token punctuation">)</span>    <span class="token keyword">return</span> html<span class="token comment"># 存储数据到excel的函数</span><span class="token keyword">def</span> <span class="token function">saveData</span><span class="token punctuation">(</span>datalist<span class="token punctuation">,</span>savepath<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"save......."</span><span class="token punctuation">)</span>    book <span class="token operator">=</span> xlwt<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>style_compression<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#创建workbook对象</span>    sheet <span class="token operator">=</span> book<span class="token punctuation">.</span>add_sheet<span class="token punctuation">(</span><span class="token string">'电子大类'</span><span class="token punctuation">,</span> cell_overwrite_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment">#创建工作表</span>    col <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"姓名"</span><span class="token punctuation">,</span><span class="token string">"学号"</span><span class="token punctuation">,</span><span class="token string">"排名"</span><span class="token punctuation">,</span><span class="token string">"微积分"</span><span class="token punctuation">,</span><span class="token string">"线性代数"</span><span class="token punctuation">,</span><span class="token string">"英语"</span><span class="token punctuation">)</span> <span class="token comment"># 可diy</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>col<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">#列名,在excel的sheet中打印列的名字</span>    <span class="token comment"># 此处 注意数组下标不要越界，上面爬到多少数据就写多少,如爬了25个网页，则写(0,25)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         data <span class="token operator">=</span> datalist<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">#数据，在excel中打印各种数据</span>    book<span class="token punctuation">.</span>save<span class="token punctuation">(</span>savepath<span class="token punctuation">)</span> <span class="token comment">#保存</span><span class="token comment"># 保存数据到表格</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>  <span class="token comment"># 当程序执行时</span>    <span class="token comment"># 调用函数</span>     main<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># init_db("movietest.db")</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取完毕！"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
